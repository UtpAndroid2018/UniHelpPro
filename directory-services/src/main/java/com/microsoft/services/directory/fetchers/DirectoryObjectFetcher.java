/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.directory.fetchers;

import com.microsoft.services.directory.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.core.Readable;

/**
 * The type  DirectoryObject
 .
 */
public class DirectoryObjectFetcher extends OrcEntityFetcher<DirectoryObject,DirectoryObjectOperations> 
                                     implements Readable<DirectoryObject> {

     /**
     * Instantiates a new DirectoryObjectFetcher.
     *
     * @param urlComponent the url component
     * @param parent the parent
     */
     public DirectoryObjectFetcher(String urlComponent, OrcExecutable parent) {
        super(urlComponent, parent, DirectoryObject.class, DirectoryObjectOperations.class);
    }

     /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public DirectoryObjectFetcher addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public DirectoryObjectFetcher addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    public ApplicationFetcher asApplication(){
        return new ApplicationFetcher(this.urlComponent, this.parent);
    }   

    public UserFetcher asUser(){
        return new UserFetcher(this.urlComponent, this.parent);
    }   

    public ExtensionPropertyFetcher asExtensionProperty(){
        return new ExtensionPropertyFetcher(this.urlComponent, this.parent);
    }   

    public ContactFetcher asContact(){
        return new ContactFetcher(this.urlComponent, this.parent);
    }   

    public DeviceFetcher asDevice(){
        return new DeviceFetcher(this.urlComponent, this.parent);
    }   

    public DeviceConfigurationFetcher asDeviceConfiguration(){
        return new DeviceConfigurationFetcher(this.urlComponent, this.parent);
    }   

    public DirectoryLinkChangeFetcher asDirectoryLinkChange(){
        return new DirectoryLinkChangeFetcher(this.urlComponent, this.parent);
    }   

    public AppRoleAssignmentFetcher asAppRoleAssignment(){
        return new AppRoleAssignmentFetcher(this.urlComponent, this.parent);
    }   

    public GroupFetcher asGroup(){
        return new GroupFetcher(this.urlComponent, this.parent);
    }   

    public DirectoryRoleFetcher asDirectoryRole(){
        return new DirectoryRoleFetcher(this.urlComponent, this.parent);
    }   

    public DirectoryRoleTemplateFetcher asDirectoryRoleTemplate(){
        return new DirectoryRoleTemplateFetcher(this.urlComponent, this.parent);
    }   

    public ServicePrincipalFetcher asServicePrincipal(){
        return new ServicePrincipalFetcher(this.urlComponent, this.parent);
    }   

    public TenantDetailFetcher asTenantDetail(){
        return new TenantDetailFetcher(this.urlComponent, this.parent);
    }   
         /**
     * Gets createdonbehalfof.
     *
     * @return the created on behalf of
     */
    public DirectoryObjectFetcher getCreatedOnBehalfOf() {
        return new DirectoryObjectFetcher("createdOnBehalfOf", this);
    }

     /**
     * Gets created objects.
     *
     * @return the created objects
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getCreatedObjects() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("createdObjects", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets created object.
     *
     * @return the created object
     */
    public DirectoryObjectFetcher getCreatedObject(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("createdObjects", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }
     /**
     * Gets manager.
     *
     * @return the manager
     */
    public DirectoryObjectFetcher getManager() {
        return new DirectoryObjectFetcher("manager", this);
    }

     /**
     * Gets direct reports.
     *
     * @return the direct reports
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getDirectReports() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("directReports", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets direct report.
     *
     * @return the direct report
     */
    public DirectoryObjectFetcher getDirectReport(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("directReports", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

     /**
     * Gets members.
     *
     * @return the members
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getMembers() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("members", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets member.
     *
     * @return the member
     */
    public DirectoryObjectFetcher getMember(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("members", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

     /**
     * Gets member of.
     *
     * @return the member of
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getMemberOf() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("memberOf", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets member of.
     *
     * @return the member of
     */
    public DirectoryObjectFetcher getMemberOf(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("memberOf", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

     /**
     * Gets owners.
     *
     * @return the owners
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getOwners() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("owners", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets owner.
     *
     * @return the owner
     */
    public DirectoryObjectFetcher getOwner(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("owners", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

     /**
     * Gets owned objects.
     *
     * @return the owned objects
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getOwnedObjects() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("ownedObjects", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets owned object.
     *
     * @return the owned object
     */
    public DirectoryObjectFetcher getOwnedObject(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("ownedObjects", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

}
